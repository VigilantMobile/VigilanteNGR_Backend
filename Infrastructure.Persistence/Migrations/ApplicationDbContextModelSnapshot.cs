// <auto-generated />
using System;
using Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Common.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.AlertLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("alertLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AlertLevels");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.BroadcastLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("broadcastLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BroadcastLevels");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.BroadcasterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Broadcaster")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BroadcasterTypes");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.SecurityTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminAuthorizerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AlertLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BroadcastLevelId")
                        .HasColumnType("int");

                    b.Property<int>("BroadcasterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BroadcasterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LGAId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityTipCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("VGNGAAuthorizerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isAdminAuthorized")
                        .HasColumnType("bit");

                    b.Property<bool>("isVGNGAAuthorized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdminAuthorizerID");

                    b.HasIndex("BroadcasterUserId");

                    b.HasIndex("VGNGAAuthorizerID");

                    b.ToTable("SecurityTips");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.SecurityTipCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SecurityTipCategories");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.CustomClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomClaims");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.DemographicEntitiesCoordinatesJSON", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DemographicType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("demographicEntitiesCoordinatesJSONs");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("bit");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CurrentPromoUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FirstTimePromoUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LastCurrentLocationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NPFAdminLGAId")
                        .HasColumnType("int");

                    b.Property<int?>("NPFAdminSettlementId")
                        .HasColumnType("int");

                    b.Property<int?>("NPFAdminStateId")
                        .HasColumnType("int");

                    b.Property<int?>("NPFAdminTownId")
                        .HasColumnType("int");

                    b.Property<int?>("NPFOperatorLGAId")
                        .HasColumnType("int");

                    b.Property<int?>("NPFOperatorSettlementId")
                        .HasColumnType("int");

                    b.Property<int?>("NPFOperatorStateId")
                        .HasColumnType("int");

                    b.Property<int?>("NPFOperatorTownId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempLocationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueReferalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("VigilanteAdminLGAId")
                        .HasColumnType("int");

                    b.Property<int?>("VigilanteAdminSettlementId")
                        .HasColumnType("int");

                    b.Property<int?>("VigilanteAdminStateId")
                        .HasColumnType("int");

                    b.Property<int?>("VigilanteAdminTownId")
                        .HasColumnType("int");

                    b.Property<int?>("VigilanteOperatorLGAId")
                        .HasColumnType("int");

                    b.Property<int?>("VigilanteOperatorSettlementId")
                        .HasColumnType("int");

                    b.Property<int?>("VigilanteOperatorStateId")
                        .HasColumnType("int");

                    b.Property<int?>("VigilanteOperatorTownId")
                        .HasColumnType("int");

                    b.Property<bool>("isVGNGAStaff")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NPFAdminLGAId");

                    b.HasIndex("NPFAdminSettlementId");

                    b.HasIndex("NPFAdminStateId");

                    b.HasIndex("NPFAdminTownId");

                    b.HasIndex("NPFOperatorLGAId");

                    b.HasIndex("NPFOperatorSettlementId");

                    b.HasIndex("NPFOperatorStateId");

                    b.HasIndex("NPFOperatorTownId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VigilanteAdminLGAId");

                    b.HasIndex("VigilanteAdminSettlementId");

                    b.HasIndex("VigilanteAdminStateId");

                    b.HasIndex("VigilanteAdminTownId");

                    b.HasIndex("VigilanteOperatorLGAId");

                    b.HasIndex("VigilanteOperatorSettlementId");

                    b.HasIndex("VigilanteOperatorStateId");

                    b.HasIndex("VigilanteOperatorTownId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.LGA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Geometry>("Boundary")
                        .HasColumnType("geography");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LGASuperAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFLGAAuthorityAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecurityTipId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("isCapital")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SecurityTipId");

                    b.ToTable("LGAs");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecurityTipId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("TownSuperAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SecurityTipId");

                    b.ToTable("Settlements");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Geometry>("Boundary")
                        .HasColumnType("geography");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFStateAuthorityAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFStatePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecurityTipId")
                        .HasColumnType("int");

                    b.Property<string>("StateSuperAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("shapeArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("shapeLength")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("SecurityTipId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LGAId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecurityTipId")
                        .HasColumnType("int");

                    b.Property<string>("TownSuperAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SecurityTipId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.SecurityTip", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Identity.ApplicationUser", "AdminAuthorizer")
                        .WithMany("AdminAuthorizedTips")
                        .HasForeignKey("AdminAuthorizerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.Identity.ApplicationUser", "Broadcaster")
                        .WithMany("BroadcasterTips")
                        .HasForeignKey("BroadcasterUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.Identity.ApplicationUser", "VGNGAAuthorizer")
                        .WithMany("VGNGAAuthorizedTips")
                        .HasForeignKey("VGNGAAuthorizerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AdminAuthorizer");

                    b.Navigation("Broadcaster");

                    b.Navigation("VGNGAAuthorizer");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.LGA", "NPFAdminLGA")
                        .WithMany("NPFAdmins")
                        .HasForeignKey("NPFAdminLGAId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.Settlement", "NPFAdminSettlement")
                        .WithMany("NPFAdmins")
                        .HasForeignKey("NPFAdminSettlementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.State", "NPFAdminState")
                        .WithMany("NPFAdmins")
                        .HasForeignKey("NPFAdminStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.Town", "NPFAdminTown")
                        .WithMany("NPFAdmins")
                        .HasForeignKey("NPFAdminTownId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.LGA", "NPFOperatorLGA")
                        .WithMany("NPFOperators")
                        .HasForeignKey("NPFOperatorLGAId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.Settlement", "NPFOperatorSettlement")
                        .WithMany("NPFOperators")
                        .HasForeignKey("NPFOperatorSettlementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.State", "NPFOperatorState")
                        .WithMany("NPFOperators")
                        .HasForeignKey("NPFOperatorStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.Town", "NPFOperatorTown")
                        .WithMany("NPFOperators")
                        .HasForeignKey("NPFOperatorTownId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.LGA", "VigilanteAdminLGA")
                        .WithMany("VigilanteAdmins")
                        .HasForeignKey("VigilanteAdminLGAId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.Settlement", "VigilanteAdminSettlement")
                        .WithMany("VigilanteAdmins")
                        .HasForeignKey("VigilanteAdminSettlementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.State", "VigilanteAdminState")
                        .WithMany("VigilanteAdmins")
                        .HasForeignKey("VigilanteAdminStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.Town", "VigilanteAdminTown")
                        .WithMany("VigilanteAdmins")
                        .HasForeignKey("VigilanteAdminTownId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.LGA", "VigilanteOperatorLGA")
                        .WithMany("VigilanteOperators")
                        .HasForeignKey("VigilanteOperatorLGAId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.Settlement", "VigilanteOperatorSettlement")
                        .WithMany("VigilanteOperators")
                        .HasForeignKey("VigilanteOperatorSettlementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.State", "VigilanteOperatorState")
                        .WithMany("VigilanteOperators")
                        .HasForeignKey("VigilanteOperatorStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Infrastructure.Persistence.Models.LocationEntities.Town", "VigilanteOperatorTown")
                        .WithMany("VigilanteOperators")
                        .HasForeignKey("VigilanteOperatorTownId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsMany("Application.DTOs.Account.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("NPFAdminLGA");

                    b.Navigation("NPFAdminSettlement");

                    b.Navigation("NPFAdminState");

                    b.Navigation("NPFAdminTown");

                    b.Navigation("NPFOperatorLGA");

                    b.Navigation("NPFOperatorSettlement");

                    b.Navigation("NPFOperatorState");

                    b.Navigation("NPFOperatorTown");

                    b.Navigation("RefreshTokens");

                    b.Navigation("VigilanteAdminLGA");

                    b.Navigation("VigilanteAdminSettlement");

                    b.Navigation("VigilanteAdminState");

                    b.Navigation("VigilanteAdminTown");

                    b.Navigation("VigilanteOperatorLGA");

                    b.Navigation("VigilanteOperatorSettlement");

                    b.Navigation("VigilanteOperatorState");

                    b.Navigation("VigilanteOperatorTown");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.LGA", b =>
                {
                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.SecurityTip", "SecurityTip")
                        .WithMany("LGAsBroadcastedTo")
                        .HasForeignKey("SecurityTipId");

                    b.Navigation("SecurityTip");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.Settlement", b =>
                {
                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.SecurityTip", "SecurityTip")
                        .WithMany("SettlementsBroadcastedTo")
                        .HasForeignKey("SecurityTipId");

                    b.Navigation("SecurityTip");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.State", b =>
                {
                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.SecurityTip", "SecurityTip")
                        .WithMany("StatesBroadcastedTo")
                        .HasForeignKey("SecurityTipId");

                    b.Navigation("SecurityTip");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.Town", b =>
                {
                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.SecurityTip", "SecurityTip")
                        .WithMany("TownsBroadcastedTo")
                        .HasForeignKey("SecurityTipId");

                    b.Navigation("SecurityTip");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Persistence.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.SecurityTip", b =>
                {
                    b.Navigation("LGAsBroadcastedTo");

                    b.Navigation("SettlementsBroadcastedTo");

                    b.Navigation("StatesBroadcastedTo");

                    b.Navigation("TownsBroadcastedTo");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("AdminAuthorizedTips");

                    b.Navigation("BroadcasterTips");

                    b.Navigation("VGNGAAuthorizedTips");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.LGA", b =>
                {
                    b.Navigation("NPFAdmins");

                    b.Navigation("NPFOperators");

                    b.Navigation("VigilanteAdmins");

                    b.Navigation("VigilanteOperators");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.Settlement", b =>
                {
                    b.Navigation("NPFAdmins");

                    b.Navigation("NPFOperators");

                    b.Navigation("VigilanteAdmins");

                    b.Navigation("VigilanteOperators");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.State", b =>
                {
                    b.Navigation("NPFAdmins");

                    b.Navigation("NPFOperators");

                    b.Navigation("VigilanteAdmins");

                    b.Navigation("VigilanteOperators");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.LocationEntities.Town", b =>
                {
                    b.Navigation("NPFAdmins");

                    b.Navigation("NPFOperators");

                    b.Navigation("VigilanteAdmins");

                    b.Navigation("VigilanteOperators");
                });
#pragma warning restore 612, 618
        }
    }
}
