// <auto-generated />
using System;
using Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220416002627_trusted_persons")]
    partial class trusted_persons
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationUserLGA", b =>
                {
                    b.Property<int>("InternalStaffLGAsId")
                        .HasColumnType("int");

                    b.Property<string>("VGNGALGAStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InternalStaffLGAsId", "VGNGALGAStaffId");

                    b.HasIndex("VGNGALGAStaffId");

                    b.ToTable("ApplicationUserLGA");
                });

            modelBuilder.Entity("ApplicationUserSettlement", b =>
                {
                    b.Property<int>("InternalStaffSettlementsId")
                        .HasColumnType("int");

                    b.Property<string>("VGNGASettlementStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InternalStaffSettlementsId", "VGNGASettlementStaffId");

                    b.HasIndex("VGNGASettlementStaffId");

                    b.ToTable("ApplicationUserSettlement");
                });

            modelBuilder.Entity("ApplicationUserState", b =>
                {
                    b.Property<int>("InternalStaffStatesId")
                        .HasColumnType("int");

                    b.Property<string>("VGNGAStateStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InternalStaffStatesId", "VGNGAStateStaffId");

                    b.HasIndex("VGNGAStateStaffId");

                    b.ToTable("ApplicationUserState");
                });

            modelBuilder.Entity("ApplicationUserTown", b =>
                {
                    b.Property<int>("InternalStaffTownsId")
                        .HasColumnType("int");

                    b.Property<string>("VGNGATownStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InternalStaffTownsId", "VGNGATownStaffId");

                    b.HasIndex("VGNGATownStaffId");

                    b.ToTable("ApplicationUserTown");
                });

            modelBuilder.Entity("Domain.Common.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Curfew.Curfew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminAuthorizerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyEndHour")
                        .HasColumnType("int");

                    b.Property<int>("DailyStartHour")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("bit");

                    b.Property<int?>("LGAId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorIniatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminAuthorizerId");

                    b.HasIndex("LGAId");

                    b.HasIndex("OperatorIniatorId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("StateId");

                    b.HasIndex("TownId");

                    b.ToTable("StateCurfew");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Missing.MissingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminAuthorizerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BroadcastLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateLastSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("int");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("VGNGAStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isAdminAuthorized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BroadcastLevelId");

                    b.HasIndex("LoserId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("TownId");

                    b.HasIndex("VGNGAStaffId");

                    b.ToTable("MissingItem");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Missing.MissingPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminAuthorizerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BroadcastLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateLastSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LoserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("SettlementId")
                        .HasColumnType("int");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("complexion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("isAdminAuthorized")
                        .HasColumnType("bit");

                    b.Property<string>("photoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminAuthorizerID");

                    b.HasIndex("BroadcastLevelId");

                    b.HasIndex("LoserId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("TownId");

                    b.ToTable("MissingPerson");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Panic.Commute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalTripInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommuteStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureCoordinates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureSettlementAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartureSettlementId")
                        .HasColumnType("int");

                    b.Property<string>("DepartureTownAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartureTownId")
                        .HasMaxLength(150)
                        .HasColumnType("int");

                    b.Property<string>("DestinationCoordinates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationSettlementAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationSettlementId")
                        .HasColumnType("int");

                    b.Property<string>("DestinationTownAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationTownId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PanicInitiated")
                        .HasColumnType("bit");

                    b.Property<int>("PanicIntervalInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("PanicStatus")
                        .HasColumnType("int");

                    b.Property<string>("PurposeOfVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisiteeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisiteePhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartureSettlementId");

                    b.HasIndex("DepartureTownId");

                    b.HasIndex("DestinationSettlementId");

                    b.HasIndex("DestinationTownId");

                    b.ToTable("CommuteRecords");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Panic.Panic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommuteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanicInitiator")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PanicStatus")
                        .HasColumnType("int");

                    b.Property<int>("PanicType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommuteId");

                    b.HasIndex("PanicInitiator");

                    b.ToTable("PanicRecords");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Panic.TrustedPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("TrustedPeople");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.AlertLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("alertLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AlertLevels");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.BroadcastLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("broadcastLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BroadcastLevels");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.BroadcasterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Broadcaster")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BroadcasterTypes");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.SecurityTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminAuthorizerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AlertLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BroadcastLevelId")
                        .HasColumnType("int");

                    b.Property<string>("BroadcasterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BroadcasterTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalAuthorizerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExternalInitiatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LGAId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityTipCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<bool>("isAdminAuthorized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdminAuthorizerID");

                    b.HasIndex("AlertLevelId");

                    b.HasIndex("BroadcastLevelId");

                    b.HasIndex("BroadcasterId");

                    b.HasIndex("BroadcasterTypeId");

                    b.HasIndex("ExternalAuthorizerId");

                    b.HasIndex("ExternalInitiatorId");

                    b.HasIndex("LGAId");

                    b.HasIndex("SecurityTipCategoryId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("StateId");

                    b.HasIndex("TownId");

                    b.ToTable("SecurityTips");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.SecurityTipCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SecurityTipCategories");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Wanted.WantedPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BroadcastLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateLastSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("NPFAuthorityType")
                        .HasColumnType("int");

                    b.Property<string>("NPFAuthorizerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SettlementId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("complexion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("isAuthorized")
                        .HasColumnType("bit");

                    b.Property<int>("photoUrl")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BroadcastLevelId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("TownId");

                    b.ToTable("WantedPerson");
                });

            modelBuilder.Entity("Domain.Entities.CompanyEntities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretaryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HodId");

                    b.HasIndex("SecretaryId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CurrentPromoUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ExternalStaffType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FirstTimePromoUsed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAppAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAppOperator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAppSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalOperator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("LGAId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueReferalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LGAId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SettlementId");

                    b.HasIndex("StateId");

                    b.HasIndex("TownId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Identity.CustomClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomClaims");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.LGA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Geometry>("Boundary")
                        .HasColumnType("geography");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFLGAAuthorityAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("isCapital")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("LGAs");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorityPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Geometry>("Boundary")
                        .HasColumnType("geography");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFSettlementAuthorityAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Settlements");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Geometry>("Boundary")
                        .HasColumnType("geography");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFStateAuthorityAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFStateAuthorityPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("shapeArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("shapeLength")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Geometry>("Boundary")
                        .HasColumnType("geography");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LGAId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPFTownAuthorityAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LGAId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.DemographicEntitiesCoordinatesJSON", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DemographicType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("demographicEntitiesCoordinatesJSONs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ApplicationUserLGA", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.LGA", null)
                        .WithMany()
                        .HasForeignKey("InternalStaffLGAsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("VGNGALGAStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserSettlement", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.Settlement", null)
                        .WithMany()
                        .HasForeignKey("InternalStaffSettlementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("VGNGASettlementStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserState", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.State", null)
                        .WithMany()
                        .HasForeignKey("InternalStaffStatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("VGNGAStateStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserTown", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.Town", null)
                        .WithMany()
                        .HasForeignKey("InternalStaffTownsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("VGNGATownStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Curfew.Curfew", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "AdminAuthorizer")
                        .WithMany("AdminAuthorizedCurfews")
                        .HasForeignKey("AdminAuthorizerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.LocationEntities.LGA", "LGA")
                        .WithMany()
                        .HasForeignKey("LGAId");

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "OperatorIniator")
                        .WithMany("OperatorIniatedCurfews")
                        .HasForeignKey("OperatorIniatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.LocationEntities.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId");

                    b.HasOne("Domain.Entities.LocationEntities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("Domain.Entities.LocationEntities.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");

                    b.Navigation("AdminAuthorizer");

                    b.Navigation("LGA");

                    b.Navigation("OperatorIniator");

                    b.Navigation("Settlement");

                    b.Navigation("State");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Missing.MissingItem", b =>
                {
                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.BroadcastLevel", "BroadcastLevel")
                        .WithMany()
                        .HasForeignKey("BroadcastLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("CustomerMissingItems")
                        .HasForeignKey("LoserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.LocationEntities.Settlement", "Settlement")
                        .WithMany("SettlementMissingItems")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.LocationEntities.Town", "Town")
                        .WithMany("TownMissingItems")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "VGNGAStaff")
                        .WithMany()
                        .HasForeignKey("VGNGAStaffId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("BroadcastLevel");

                    b.Navigation("Settlement");

                    b.Navigation("Town");

                    b.Navigation("VGNGAStaff");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Missing.MissingPerson", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "VGNGAStaff")
                        .WithMany()
                        .HasForeignKey("AdminAuthorizerID");

                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.BroadcastLevel", "BroadcastLevel")
                        .WithMany()
                        .HasForeignKey("BroadcastLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("CustomerMissingPeople")
                        .HasForeignKey("LoserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.LocationEntities.Settlement", "Settlement")
                        .WithMany("SettlementMissingPeople")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LocationEntities.Town", "Town")
                        .WithMany("TownMissingPeople")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("BroadcastLevel");

                    b.Navigation("Settlement");

                    b.Navigation("Town");

                    b.Navigation("VGNGAStaff");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Panic.Commute", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.Settlement", "DepartureSettlement")
                        .WithMany("DepartureSettlementCommutes")
                        .HasForeignKey("DepartureSettlementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LocationEntities.Town", "DepartureTown")
                        .WithMany("DepartureTownCommutes")
                        .HasForeignKey("DepartureTownId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LocationEntities.Settlement", "DestinationSettlement")
                        .WithMany("DestinationSettlementCommutes")
                        .HasForeignKey("DestinationSettlementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LocationEntities.Town", "DestinationTown")
                        .WithMany("DestinationTownCommutes")
                        .HasForeignKey("DestinationTownId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DepartureSettlement");

                    b.Navigation("DepartureTown");

                    b.Navigation("DestinationSettlement");

                    b.Navigation("DestinationTown");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Panic.Panic", b =>
                {
                    b.HasOne("Domain.Entities.AppTroopers.Panic.Commute", "Commute")
                        .WithMany()
                        .HasForeignKey("CommuteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("PanicInitiator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Commute");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Panic.TrustedPerson", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "Contact")
                        .WithMany("TrustedPeople")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.SecurityTip", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "VGNGAAdminAuthorizer")
                        .WithMany()
                        .HasForeignKey("AdminAuthorizerID");

                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.AlertLevel", "AlertLevel")
                        .WithMany("SecurityTips")
                        .HasForeignKey("AlertLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.BroadcastLevel", "BroadcastLevel")
                        .WithMany("VGNGAAdminApprovedSecurityTips")
                        .HasForeignKey("BroadcastLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("CustomerSecurityTips")
                        .HasForeignKey("BroadcasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.BroadcasterType", "BroadcasterType")
                        .WithMany("SecurityTips")
                        .HasForeignKey("BroadcasterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "ExternalAuthorizer")
                        .WithMany("ExternalStaffAuthorizedTips")
                        .HasForeignKey("ExternalAuthorizerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "ExternalInitiator")
                        .WithMany("ExternalStaffIniatedTips")
                        .HasForeignKey("ExternalInitiatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.LocationEntities.LGA", null)
                        .WithMany("SecurityTips")
                        .HasForeignKey("LGAId");

                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.SecurityTipCategory", "SecurityTipCategory")
                        .WithMany("SecurityTips")
                        .HasForeignKey("SecurityTipCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LocationEntities.Settlement", null)
                        .WithMany("SecurityTips")
                        .HasForeignKey("SettlementId");

                    b.HasOne("Domain.Entities.LocationEntities.State", null)
                        .WithMany("SecurityTips")
                        .HasForeignKey("StateId");

                    b.HasOne("Domain.Entities.LocationEntities.Town", null)
                        .WithMany("SecurityTips")
                        .HasForeignKey("TownId");

                    b.Navigation("AlertLevel");

                    b.Navigation("ApplicationUser");

                    b.Navigation("BroadcasterType");

                    b.Navigation("BroadcastLevel");

                    b.Navigation("ExternalAuthorizer");

                    b.Navigation("ExternalInitiator");

                    b.Navigation("SecurityTipCategory");

                    b.Navigation("VGNGAAdminAuthorizer");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.Wanted.WantedPerson", b =>
                {
                    b.HasOne("Domain.Entities.AppTroopers.SecurityTip.BroadcastLevel", "BroadcastLevel")
                        .WithMany()
                        .HasForeignKey("BroadcastLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LocationEntities.Settlement", "Settlement")
                        .WithMany("SettlementWantedPeople")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LocationEntities.Town", "Town")
                        .WithMany("TownWantedPeople")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BroadcastLevel");

                    b.Navigation("Settlement");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Domain.Entities.CompanyEntities.Department", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "HOD")
                        .WithMany("HODDepartments")
                        .HasForeignKey("HodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "Secretary")
                        .WithMany("SecretaryDepartments")
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HOD");

                    b.Navigation("Secretary");
                });

            modelBuilder.Entity("Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Entities.CompanyEntities.Department", "Department")
                        .WithMany("VGNGAStaff")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.LocationEntities.LGA", "CustomerLGA")
                        .WithMany("Customers")
                        .HasForeignKey("LGAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LocationEntities.Settlement", "CustomerSettlement")
                        .WithMany("Customers")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.LocationEntities.State", "CustomerState")
                        .WithMany("Customers")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LocationEntities.Town", "CustomerTown")
                        .WithMany("Customers")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerLGA");

                    b.Navigation("CustomerSettlement");

                    b.Navigation("CustomerState");

                    b.Navigation("CustomerTown");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.LGA", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.State", "State")
                        .WithMany("LGAs")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.Settlement", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.Town", "Town")
                        .WithMany("Settlements")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.Town", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.LGA", "LGA")
                        .WithMany("Towns")
                        .HasForeignKey("LGAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LGA");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.AlertLevel", b =>
                {
                    b.Navigation("SecurityTips");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.BroadcastLevel", b =>
                {
                    b.Navigation("VGNGAAdminApprovedSecurityTips");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.BroadcasterType", b =>
                {
                    b.Navigation("SecurityTips");
                });

            modelBuilder.Entity("Domain.Entities.AppTroopers.SecurityTip.SecurityTipCategory", b =>
                {
                    b.Navigation("SecurityTips");
                });

            modelBuilder.Entity("Domain.Entities.CompanyEntities.Department", b =>
                {
                    b.Navigation("VGNGAStaff");
                });

            modelBuilder.Entity("Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("AdminAuthorizedCurfews");

                    b.Navigation("CustomerMissingItems");

                    b.Navigation("CustomerMissingPeople");

                    b.Navigation("CustomerSecurityTips");

                    b.Navigation("ExternalStaffAuthorizedTips");

                    b.Navigation("ExternalStaffIniatedTips");

                    b.Navigation("HODDepartments");

                    b.Navigation("OperatorIniatedCurfews");

                    b.Navigation("SecretaryDepartments");

                    b.Navigation("TrustedPeople");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.LGA", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("SecurityTips");

                    b.Navigation("Towns");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.Settlement", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("DepartureSettlementCommutes");

                    b.Navigation("DestinationSettlementCommutes");

                    b.Navigation("SecurityTips");

                    b.Navigation("SettlementMissingItems");

                    b.Navigation("SettlementMissingPeople");

                    b.Navigation("SettlementWantedPeople");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.State", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("LGAs");

                    b.Navigation("SecurityTips");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.Town", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("DepartureTownCommutes");

                    b.Navigation("DestinationTownCommutes");

                    b.Navigation("SecurityTips");

                    b.Navigation("Settlements");

                    b.Navigation("TownMissingItems");

                    b.Navigation("TownMissingPeople");

                    b.Navigation("TownWantedPeople");
                });
#pragma warning restore 612, 618
        }
    }
}
